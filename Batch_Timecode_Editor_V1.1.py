fu.Execute("\n--Jimmy Qiu\n\nresolve = Resolve()\nui = app.UIManager\ndisp = bmd.UIDispatcher(ui)\npm = resolve:GetProjectManager()\nproj = pm:GetCurrentProject()\ntl = proj:GetCurrentTimeline()\nchild_dict = {}\n\nfunction fast_scandir(dirname, parent_item)\n    subfolders = dirname:GetSubFolderList()\n    for _, dirname in pairs(subfolders) do\n        if type(dirname) == 'number' then\n            goto skip_to_next\n        end\n        child_item = ''\n        folderitm.FolderTreeNested:AddTopLevelItem(parent_item)\n        child_item = folderitm.FolderTreeNested:NewItem()\n        child_item.Text[0] = dirname:GetName()\n        dname = dirname:GetName()\n        diritem = {}\n        diritem[dirname] = parent_item.Text[0]\n        dictionary = {}\n        dictionary[dname] = diritem\n        table.insert(child_dict, dictionary)\n        parent_item:AddChild(child_item)\n        parent_item.Expanded = true\n        folderitm.FolderTreeNested:SortByColumn(0, 'AscendingOrder')\n        ::skip_to_next::\n        pcall(fast_scandir, dirname, child_item)\n    end\nend\n\nfunction find_items(text)\n    return folderitm.FolderTreeNested:FindItems(text,\n    {\n		MatchExactly = false,\n		MatchFixedString = false,\n		MatchContains = true,\n		MatchStartsWith = false,\n		MatchEndsWith = false,\n		MatchCaseSensitive = false,\n		MatchRegExp = false,\n		MatchWrap = false,\n		MatchRecursive = true,\n	}, 0)\nend\n\nfunction get_all_items()\n    return folderitm.FolderTreeNested:FindItems('*',\n    {\n		MatchExactly = false,\n		MatchFixedString = false,\n		MatchContains = false,\n		MatchStartsWith = false,\n		MatchEndsWith = false,\n		MatchCaseSensitive = false,\n		MatchRegExp = false,\n		MatchWildcard = true,\n		MatchWrap = false,\n		MatchRecursive = true,\n	}, 0)\nend\n\nfunction _search(ev)\n    text = folderitm.description_text.Text\n    if text == '' then\n        _test_subfolder(ev)\n    end\n    if text ~= '' then\n        folderitm.FolderTreeNested.UpdatesEnabled = false\n        all_items = get_all_items()\n        for i, item in ipairs(all_items) do\n            if (not item.Hidden) then\n                item.Hidden = true\n            end\n        end\n        found_item = find_items(text)\n        for i, foundItem in ipairs(found_item) do\n	    foundItem.Hidden = false\n	    foundItem.Expanded = true\n            print(foundItem)\n            parentItem = foundItem:Parent()\n	    parentItem.Hidden = false\n  	    parentItem.Expanded = true\n            print(parentItem)\n            for n=1, 1000 do\n                pcall(parent_hid_expand)\n            end\n        end\n    end\n    folderitm.FolderTreeNested.UpdatesEnabled = true\nend\n\nfunction parent_hid_expand()\n    parentItem = parentItem:Parent()\n    parentItem.Hidden = false\n    parentItem.Expanded = true\nend\n\nfunction _test_subfolder(ev)\n    mp = proj:GetMediaPool()\n    root_folder = mp:GetRootFolder()\n    parent_item = folderitm.FolderTreeNested:NewItem()\n    parent_item.Text[0] = 'Master'\n    parent_item.Expanded = true\n    folderitm.FolderTreeNested:Clear()\n    fast_scandir(root_folder, parent_item)\nend\n\nfunction list_folder_clips(selected_item)\n    folderitm.ClipTree:Clear()\n    header = folderitm.ClipTree:NewItem()\n    header.Text[0] = 'ID'\n    header.Text[1] = 'Clip Name'\n    header.Text[2] = 'Start TC'\n    header.Text[3] = 'End TC'\n    header.Text[4] = 'Usage'\n    folderitm.ClipTree:SetHeaderItem(header)\n    folderitm.ClipTree.ColumnCount = 5\n\n    folderitm.ClipTree.ColumnWidth[0] = 50\n    folderitm.ClipTree.ColumnWidth[1] = 230\n    folderitm.ClipTree.ColumnWidth[2] = 100\n    folderitm.ClipTree.ColumnWidth[3] = 100\n    folderitm.ClipTree.ColumnWidth[4] = 50\n    i = 0\n    all_clips_list = {}\n    for key, folder in pairs(selected_item) do\n        ui_item = folder.Text[0]\n        parent_folder_name = folder:Parent().Text[0]\n        for _, folder_pair in pairs(child_dict) do\n            for foldername, folder in pairs(folder_pair) do\n                for child, parent in pairs(folder) do\n                    if foldername == ui_item and parent == parent_folder_name then\n                        folder_item = child\n                        folder_clips = folder_item:GetClipList()\n                        for _, items in pairs(folder_clips) do\n        		    if type(items) == 'number' then\n            		        goto skip_to_next\n        		    end\n                            extension = items:GetName():match('^.+%.(.+)$')\n                            if extension ~= 'exr' and extension ~= 'EXR' then\n                                if folderitm.CheckboxShowAll.Checked == false then\n                                    goto skip_to_next\n                                end\n                            end\n                            i= i + 1\n                            itRow = folderitm.ClipTree:NewItem()\n                            itRow.Text[0] = tostring(i)\n                            itRow.Text[1] = items:GetName()\n                            itRow.Text[2] = items:GetClipProperty('Start TC')\n                            itRow.Text[3] = items:GetClipProperty('End TC')\n                            itRow.Text[4] = items:GetClipProperty('Usage')\n                            folderitm.ClipTree:AddTopLevelItem(itRow)\n                            ::skip_to_next::\n                        end\n                        table.insert(all_clips_list, folder_clips)\n                    end\n                end\n            end\n        end\n    end\n    folderitm.ClipTree:SortByColumn(4, 'AscendingOrder')\n    return all_clips_list\nend\n\nfunction addZeros(Id, length)\n    Id = tostring(Id)\n    local Id = string.rep('0', length-#Id)..Id\n    return Id\nend\n\nfunction Get_Path(media_item)\n         local path = media_item:GetClipProperty('File Path')\n         check = 'exr'\n         if string.match(path, '%b[-') == nil then\n             check = 'bad'\n         end\n         if check == 'EXR' or check == 'exr' then\n             firstframe = string.match(string.match(path, '%b[-'), '%d+')\n             new_path = string.gsub(path, '%b[]', firstframe)\n         end\n         return new_path\nend\n\nfunction TimecodeEXR(path)\n    local exr = EXRIO()\n    exr:ReadOpen(path, -1)\n    assert(exr:ReadHeader())\n\n    local t, val = exr:GetAttribute(1, 'timeCode')\n    if t then\n        for k, v in pairs(val) do\n            if k == 'Hours' then\n                hour = string.format('%02d', v)\n            end\n            if k == 'Minutes' then\n                minute = string.format('%02d', v)\n            end\n            if k == 'Seconds' then\n                second = string.format('%02d', v)\n            end\n            if k == 'Frame' then\n                frame = string.format('%02d', v)\n            end\n        end\n        timecode = hour..':'..minute..':'..second..':'..frame\n    end\n    print(timecode)\n    return timecode\nend\n\nfunction frames_to_timecode(total_frames, frame_rate, drop)    --credits to Manne Ohrstrom and Shotgun Software Inc.\n\n    fps_int = math.floor(frame_rate + 0.5)\n\n    if drop then\n\n        FRAMES_IN_ONE_MINUTE = 1800 - 2\n\n        FRAMES_IN_TEN_MINUTES = (FRAMES_IN_ONE_MINUTE * 10) - 2\n\n        ten_minute_chunks = total_frames / FRAMES_IN_TEN_MINUTES\n        one_minute_chunks = total_frames % FRAMES_IN_TEN_MINUTES\n\n        ten_minute_part = 18 * ten_minute_chunks\n        one_minute_part = 2 * ((one_minute_chunks - 2) / FRAMES_IN_ONE_MINUTE)\n\n        if one_minute_part < 0 then\n            one_minute_part = 0\n        end\n        --add extra frames\n        total_frames = total_frames + ten_minute_part + one_minute_part\n\n       --for 60 fps drop frame calculations, we add twice the number of frames\n        if fps_int == 60 then\n            total_frames = total_frames * 2\n        end\n\n       --time codes are on the form 12:12:12;12\n        smpte_token = ';'\n\n    else\n        --time codes are on the form 12:12:12:12\n        smpte_token = ':'\n    end\n\n    --now split our frames into time code\n    hours = math.floor(total_frames / (3600 * fps_int))\n    minutes = math.floor(total_frames / (60 * fps_int) % 60)\n    seconds = math.floor(total_frames / fps_int % 60)\n    frames = math.floor(total_frames % fps_int)\n    return string.format('%02d:%02d:%02d%s%02d', hours, minutes, seconds, smpte_token, frames)\nend\n\nfunction _selection(ev)\n    selected_item = folderitm.FolderTreeNested:SelectedItems()\n    print(selected_item)\n    all_clips = list_folder_clips(selected_item)\nend\n\nfunction _useEXRtimecode(ev)\n    selected_item = folderitm.ClipTree:SelectedItems()\n    for _, cliptable in pairs(all_clips_list) do\n        for key, clip in pairs(cliptable) do\n            if type(clip) == 'number' then\n                goto skip_to_next\n            end\n            for _, item in pairs(selected_item) do\n                if clip:GetName() == item.Text[1] then\n                    clip_path = Get_Path(clip)\n                    clip_timecode = TimecodeEXR(clip_path)\n                    clip:SetClipProperty('Start TC', clip_timecode)\n                end\n            end\n            ::skip_to_next::\n        end\n    end\n    list_folder_clips(folderitm.FolderTreeNested:SelectedItems())\nend\n\nfunction _useFrametimecode(ev)\n    selected_item = folderitm.ClipTree:SelectedItems()\n    for _, cliptable in pairs(all_clips_list) do\n        for key, clip in pairs(cliptable) do\n            if type(clip) == 'number' then\n                goto skip_to_next\n            end\n            for _, item in pairs(selected_item) do\n                if clip:GetName() == item.Text[1] then\n                    firstframe = string.match(string.match(item.Text[1], '%b[-'), '%d+')\n                    frame_to_tc = frames_to_timecode(firstframe, 23.98, false)\n                    clip:SetClipProperty('Start TC', frame_to_tc)\n                end\n            end\n            ::skip_to_next::\n        end\n    end\n    list_folder_clips(folderitm.FolderTreeNested:SelectedItems())\nend\n\nfunction _usecustomizedtimecode(ev)\n    input_text = popitm.timecode_input.Text\n    disp:ExitLoop()\n    if string.find(input_text, ':') then\n        process_tc = input_text\n    else\n        process_tc = num_to_timecode(input_text)\n        popitm.timecode_input.Text = process_tc\n    end\n\n    selected_item = folderitm.ClipTree:SelectedItems()\n    for _, cliptable in pairs(all_clips_list) do\n        for key, clip in pairs(cliptable) do\n            if type(clip) == 'number' then\n                goto skip_to_next\n            end\n            for _, item in pairs(selected_item) do\n                if clip:GetName() == item.Text[1] then\n                    clip:SetClipProperty('Start TC', process_tc)\n                end\n            end\n            ::skip_to_next::\n        end\n    end\n    list_folder_clips(folderitm.FolderTreeNested:SelectedItems())\nend\n\nfunction _timecode_text_to_tc(ev)\n    input_text = popitm.timecode_input.Text\n    if string.find(input_text, ':') then\n        text_tc = input_text\n    else\n        text_tc = num_to_timecode(input_text)\n    end\n    popitm.timecode_input.Text = text_tc\nend\n\nfunction num_to_timecode(number)\n    new_number = string.format('%08d', string.sub(number, -8))\n    new_tc = new_number:gsub('%x%x', '%' .. ':' .. '%1'):sub(1 + #':')\n    return new_tc\nend\n\nfunction _popup(ev)\n    popitm.timecode_input.Text = ''\n    popitm.timecode_input.PlaceholderText = 'Enter the start timecode...'\n    popup:Show()\n    disp:RunLoop()\n    popup:Hide()\nend\n\nfunction folder_ui(ui)\n    window04 = ui:VGroup { Spacing = 10,\n        ui:HGroup { Spacing = 10, Weight = 0,\n            ui:LineEdit { ID = 'description_text', Weight = 2, PlaceholderText = 'Search folder name...', Events = { ReturnPressed = true },\n	    },\n            ui:VGap { Weight = 1 },\n            ui:Button { Weight = 0, ID = 'internaltcButton', Text = 'Use embedded TC' },\n            ui:Button { Weight = 0, ID = 'framecountButton', Text = 'Use framecount TC' },\n            ui:Button { Weight = 0, ID = 'customButton', Text = 'Use custom TC' },\n        },\n        ui:HGroup { Spacing = 10, Weight = 1,\n            ui:VGroup { Spacing = 10, Weight = 1,\n                ui:Tree {\n                    ID = 'FolderTreeNested',\n                    HeaderHidden = true,\n                    Weight = 1,\n                    SelectionMode = 'ExtendedSelection',\n                     \n                    Events = {\n                              ItemDoubleClicked = true,\n                              ItemClicked = true,\n                              ItemsExpandable = true,\n                              ItemSelectionChanged = true},\n                },\n            },\n            ui:VGroup { Spacing = 10, Weight = 3,\n                ui:Tree {\n                    ID = 'ClipTree',\n                    HeaderHidden = false,\n                    Weight = 1,\n                    SelectionMode = 'ExtendedSelection',\n                    Events = {\n                              ItemDoubleClicked = true,\n                              ItemClicked = true,\n                              ItemsExpandable = true,\n                              ItemSelectionChanged = true },\n                },\n           },\n        },\n        ui:HGroup { Spacing = 10, Weight = 0,\n            ui:Button { ID = 'test', Text = 'Refresh', Weight = 0 },\n            ui:VGap(1),\n            ui:CheckBox { Weight = 0, ID = 'CheckboxShowAll', Text = 'Show All Format' },\n        },\n    }\n    return window04\nend\n\nfunction popup_ui(ui)\n    window05 = ui:VGroup { Spacing = 10,\n        ui:HGroup { Spacing = 10, Weight = 0,\n            ui:LineEdit { ID = 'timecode_input', Weight = 7, PlaceholderText = 'Enter the start timecode...', Events = { ReturnPressed = true },\n	    },\n            ui:VGap(1),\n        },\n        ui:HGroup { Spacing = 10, Weight = 0,\n            ui:VGap(1),\n            ui:Button { ID = 'yesbutton', Text = 'Apply', Weight = 0 },\n            ui:Button { ID = 'nobutton', Text = 'Cancel', Weight = 0 },\n        },\n    }\n    return window05\nend\n\nlocal function initialize()\n\n    window_04 = folder_ui(ui)\n    window_05 = popup_ui(ui)\n\n    folderui = disp:AddWindow({ \n                        WindowTitle = 'Batch Timecode Editor V1.1', \n                        ID = 'FolderWin', \n                        Geometry = {1000, 600, 800, 600},\n                        },\n    window_04)\n\n    popup = disp:AddWindow({\n                        WindowTitle = 'Input Timecode', \n                        ID = 'MyPop', \n                        Geometry = {1000, 700, 400, 300},\n                        },\n    window_05)\n\n    folderitm = folderui:GetItems()\n    popitm = popup:GetItems()\n    -- The window was closed\n    function folderui.On.FolderWin.Close(ev)\n        disp:ExitLoop()\n    end\n    function popup.On.MyPop.Close(ev)\n        disp:ExitLoop()\n    end\n    function popup.On.nobutton.Clicked(ev)\n        disp:ExitLoop()\n    end\n    function popup.On.yesbutton.Clicked(ev)\n        _usecustomizedtimecode(ev)\n    end\n    function folderui.On.test.Clicked(ev)\n         _test_subfolder(ev)\n    end\n    function folderui.On.CheckboxShowAll.Clicked(ev)\n         if folderitm.CheckboxShowAll.Checked == true then\n             folderitm.internaltcButton.Enabled = false\n             folderitm.framecountButton.Enabled = false\n         else\n             folderitm.internaltcButton.Enabled = true\n             folderitm.framecountButton.Enabled = true\n         end\n         list_folder_clips(folderitm.FolderTreeNested:SelectedItems())\n    end\n    function folderui.On.internaltcButton.Clicked(ev)\n         _useEXRtimecode(ev)\n    end\n    function folderui.On.framecountButton.Clicked(ev)\n         _useFrametimecode(ev)\n    end\n    function folderui.On.customButton.Clicked(ev)\n         _popup(ev)\n    end\n    function folderui.On.description_text.ReturnPressed(ev)\n         _search(ev)\n    end\n    function popup.On.timecode_input.ReturnPressed(ev)\n         _timecode_text_to_tc(ev)\n    end\n    function folderui.On.FolderTreeNested.ItemDoubleClicked(ev)\n         _clicked(ev)\n    end\n    function folderui.On.FolderTreeNested.ItemSelectionChanged(ev)\n         _selection(ev)\n    end\n\n    header = folderitm.ClipTree:NewItem()\n    header.Text[0] = 'ID'\n    header.Text[1] = 'Clip Name'\n    header.Text[2] = 'Start TC'\n    header.Text[3] = 'End TC'\n    header.Text[4] = 'Usage'\n\n    folderitm.ClipTree:SetHeaderItem(header)\n    folderitm.ClipTree.ColumnCount = 5\n\n    folderitm.ClipTree.ColumnWidth[0] = 50\n    folderitm.ClipTree.ColumnWidth[1] = 230\n    folderitm.ClipTree.ColumnWidth[2] = 100\n    folderitm.ClipTree.ColumnWidth[3] = 100\n    folderitm.ClipTree.ColumnWidth[4] = 50\n    _test_subfolder(0)\nend\n\ninitialize()\n\nfolderui:Show()\ndisp:RunLoop()\nfolderui:Hide()\n\ncollectgarbage()\n")
